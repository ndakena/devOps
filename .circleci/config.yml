version: 2.1
orbs:
    node: circleci/node@2.0.2
    aws-cli: circleci/aws-cli@1.1.0
    slack: circleci/slack@3.4.2
jobs:
    # The build phase
    frontend-build-phase:
      executor:
        name: node/default
        tag: '13.8.0'
      steps:
          - checkout
          - run: cd frontend && npm i && npm run build
    backend-build-phase:
      executor:
        name: node/default
        tag: '13.8.0'
      steps:
          - checkout
          - run: cd backend && npm i && npm run build
    # The test Phase
    frontend-test-phase:
      executor:
        name: node/default
        tag: '13.8.0'
      steps:
          - checkout
          - run: cd frontend && npm install --save oauth-sign && npm run test
    backend-test-phase:
          executor:
              name: node/default
              tag: '13.8.0'
          steps:
              - checkout
              - run: cd backend && npm i && npm run test
    # Analyze phase
    backend-analyze-phase:
          executor:
              name: node/default
              tag: '13.8.0'
          steps:
              - checkout
              - run: cd backend && npm i && npm audit fix --audit-level=critical --force
    frontend-analyze-phase:
          executor:
              name: node/default
              tag: '13.8.0'
          steps:
              - checkout
              - run: cd frontend && npm i && npm audit --audit-level=critical --force
# migration job creation
    database-migration-phase: 
      executor:
        name: node/default
        tag: '13.8.0'
      steps:
          - checkout
          - run: cd backend && npm i && sudo npm install typescript -g && npm run migrations > migrate-evidence.txt
                 

    # AWS infrastructure
    create_infrastructure:
      executor: aws-cli/default
      steps:
        - checkout
        - aws-cli/setup
        - run:
            name: Ensure backend infrastructure exist
            command: |
              pwd
              ls -la
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name my-stack
    # backend ec2 infrastructure
    backend-ec2-create:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Creating the backend infrastructure
            command: |
              aws cloudformation describe-stack-events --stack-name my-s3-bucket-stack
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name my-backend-stack
        - run:
           name: Test the things
           command: exit 0
        - slack/status:
           channel: $SLACK_CHANNEL
           failure_message: "Failure: build [$CIRCLE_BUILD_NUM]($CIRCLE_BUILD_URL) of [<<pipeline.git.branch>>](<<pipeline.project.git_url>>/tree/<<pipeline.git.branch>>) _($CIRCLE_USERNAME)_"
           success_message: "Success: build [$CIRCLE_BUILD_NUM]($CIRCLE_BUILD_URL) of [<<pipeline.git.branch>>](<<pipeline.project.git_url>>/tree/<<pipeline.git.branch>>) _($CIRCLE_USERNAME)_"               
    # front bucket infrastructure infrastructure
    frontend-s3-bucket-create:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Creating the frontend infrastructure
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name my-s3-bucket-stack
    print_env:
       docker:
           - image: cimg/base:2020.01
       steps:
        - checkout
        - run:
            name: "echo an env var that is part of our project"
            command: |
              echo $AWS_DEFAULT_REGION # this env var must be swt within the project
    configure_infrastructure_test:
       docker:
          - image: python:3.7-alpine3.11
       steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["65:10:71:b1:c8:38:04:7a:fc:e0:36:b2:86:6d:e5:1e"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
        - run:
            name: Configure server
            command: |
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/roles/main.yml
 ## Workflows for pipelines
workflows:
    All-pipeline-phases:
        jobs:
     #      - frontend-s3-bucket-create
     #      - backend-ec2-create
     #      - configure_infrastructure_test
     #      - database-migration-phase
     #           requires:
     #            - configure_infrastructure_test
            - frontend-s3-bucket-create

